(* fattree shortest-path reachability *)
(* k = 10 *)
(* dest: 75 *)
(* src: 124 *)
(* single-src reachability *)

let src =  124

type bgpType = {comm: int; lp: int; length: int}
type attribute = option[bgpType]
let nodes = 125
let edges = {
0 = 1;
0 = 2;
0 = 3;
0 = 4;
0 = 5;
0 = 6;
0 = 7;
0 = 8;
0 = 9;
0 = 10;
15 = 16;
15 = 17;
15 = 18;
15 = 19;
15 = 20;
15 = 21;
15 = 22;
15 = 23;
15 = 24;
15 = 25;
30 = 31;
30 = 32;
30 = 33;
30 = 34;
30 = 35;
30 = 36;
30 = 37;
30 = 38;
30 = 39;
30 = 40;
45 = 46;
45 = 47;
45 = 48;
45 = 49;
45 = 50;
45 = 51;
45 = 52;
45 = 53;
45 = 54;
45 = 55;
60 = 61;
60 = 62;
60 = 63;
60 = 64;
60 = 65;
60 = 66;
60 = 67;
60 = 68;
60 = 69;
60 = 70;
1 = 11;
1 = 12;
1 = 13;
1 = 14;
1 = 75;
1 = 76;
1 = 77;
1 = 78;
1 = 79;
16 = 26;
16 = 27;
16 = 28;
16 = 29;
16 = 75;
16 = 76;
16 = 77;
16 = 78;
16 = 79;
31 = 41;
31 = 42;
31 = 43;
31 = 44;
31 = 75;
31 = 76;
31 = 77;
31 = 78;
31 = 79;
46 = 56;
46 = 57;
46 = 58;
46 = 59;
46 = 75;
46 = 76;
46 = 77;
46 = 78;
46 = 79;
61 = 71;
61 = 72;
61 = 73;
61 = 74;
61 = 75;
61 = 76;
61 = 77;
61 = 78;
61 = 79;
2 = 11;
2 = 12;
2 = 13;
2 = 14;
2 = 80;
2 = 81;
2 = 82;
2 = 83;
2 = 84;
17 = 26;
17 = 27;
17 = 28;
17 = 29;
17 = 80;
17 = 81;
17 = 82;
17 = 83;
17 = 84;
32 = 41;
32 = 42;
32 = 43;
32 = 44;
32 = 80;
32 = 81;
32 = 82;
32 = 83;
32 = 84;
47 = 56;
47 = 57;
47 = 58;
47 = 59;
47 = 80;
47 = 81;
47 = 82;
47 = 83;
47 = 84;
62 = 71;
62 = 72;
62 = 73;
62 = 74;
62 = 80;
62 = 81;
62 = 82;
62 = 83;
62 = 84;
3 = 11;
3 = 12;
3 = 13;
3 = 14;
3 = 85;
3 = 86;
3 = 87;
3 = 88;
3 = 89;
18 = 26;
18 = 27;
18 = 28;
18 = 29;
18 = 85;
18 = 86;
18 = 87;
18 = 88;
18 = 89;
33 = 41;
33 = 42;
33 = 43;
33 = 44;
33 = 85;
33 = 86;
33 = 87;
33 = 88;
33 = 89;
48 = 56;
48 = 57;
48 = 58;
48 = 59;
48 = 85;
48 = 86;
48 = 87;
48 = 88;
48 = 89;
63 = 71;
63 = 72;
63 = 73;
63 = 74;
63 = 85;
63 = 86;
63 = 87;
63 = 88;
63 = 89;
4 = 11;
4 = 12;
4 = 13;
4 = 14;
4 = 90;
4 = 91;
4 = 92;
4 = 93;
4 = 94;
19 = 26;
19 = 27;
19 = 28;
19 = 29;
19 = 90;
19 = 91;
19 = 92;
19 = 93;
19 = 94;
34 = 41;
34 = 42;
34 = 43;
34 = 44;
34 = 90;
34 = 91;
34 = 92;
34 = 93;
34 = 94;
49 = 56;
49 = 57;
49 = 58;
49 = 59;
49 = 90;
49 = 91;
49 = 92;
49 = 93;
49 = 94;
64 = 71;
64 = 72;
64 = 73;
64 = 74;
64 = 90;
64 = 91;
64 = 92;
64 = 93;
64 = 94;
5 = 11;
5 = 12;
5 = 13;
5 = 14;
5 = 95;
5 = 96;
5 = 97;
5 = 98;
5 = 99;
20 = 26;
20 = 27;
20 = 28;
20 = 29;
20 = 95;
20 = 96;
20 = 97;
20 = 98;
20 = 99;
35 = 41;
35 = 42;
35 = 43;
35 = 44;
35 = 95;
35 = 96;
35 = 97;
35 = 98;
35 = 99;
50 = 56;
50 = 57;
50 = 58;
50 = 59;
50 = 95;
50 = 96;
50 = 97;
50 = 98;
50 = 99;
65 = 71;
65 = 72;
65 = 73;
65 = 74;
65 = 95;
65 = 96;
65 = 97;
65 = 98;
65 = 99;
6 = 11;
6 = 12;
6 = 13;
6 = 14;
6 = 100;
6 = 101;
6 = 102;
6 = 103;
6 = 104;
21 = 26;
21 = 27;
21 = 28;
21 = 29;
21 = 100;
21 = 101;
21 = 102;
21 = 103;
21 = 104;
36 = 41;
36 = 42;
36 = 43;
36 = 44;
36 = 100;
36 = 101;
36 = 102;
36 = 103;
36 = 104;
51 = 56;
51 = 57;
51 = 58;
51 = 59;
51 = 100;
51 = 101;
51 = 102;
51 = 103;
51 = 104;
66 = 71;
66 = 72;
66 = 73;
66 = 74;
66 = 100;
66 = 101;
66 = 102;
66 = 103;
66 = 104;
7 = 11;
7 = 12;
7 = 13;
7 = 14;
7 = 105;
7 = 106;
7 = 107;
7 = 108;
7 = 109;
22 = 26;
22 = 27;
22 = 28;
22 = 29;
22 = 105;
22 = 106;
22 = 107;
22 = 108;
22 = 109;
37 = 41;
37 = 42;
37 = 43;
37 = 44;
37 = 105;
37 = 106;
37 = 107;
37 = 108;
37 = 109;
52 = 56;
52 = 57;
52 = 58;
52 = 59;
52 = 105;
52 = 106;
52 = 107;
52 = 108;
52 = 109;
67 = 71;
67 = 72;
67 = 73;
67 = 74;
67 = 105;
67 = 106;
67 = 107;
67 = 108;
67 = 109;
8 = 11;
8 = 12;
8 = 13;
8 = 14;
8 = 110;
8 = 111;
8 = 112;
8 = 113;
8 = 114;
23 = 26;
23 = 27;
23 = 28;
23 = 29;
23 = 110;
23 = 111;
23 = 112;
23 = 113;
23 = 114;
38 = 41;
38 = 42;
38 = 43;
38 = 44;
38 = 110;
38 = 111;
38 = 112;
38 = 113;
38 = 114;
53 = 56;
53 = 57;
53 = 58;
53 = 59;
53 = 110;
53 = 111;
53 = 112;
53 = 113;
53 = 114;
68 = 71;
68 = 72;
68 = 73;
68 = 74;
68 = 110;
68 = 111;
68 = 112;
68 = 113;
68 = 114;
9 = 11;
9 = 12;
9 = 13;
9 = 14;
9 = 115;
9 = 116;
9 = 117;
9 = 118;
9 = 119;
24 = 26;
24 = 27;
24 = 28;
24 = 29;
24 = 115;
24 = 116;
24 = 117;
24 = 118;
24 = 119;
39 = 41;
39 = 42;
39 = 43;
39 = 44;
39 = 115;
39 = 116;
39 = 117;
39 = 118;
39 = 119;
54 = 56;
54 = 57;
54 = 58;
54 = 59;
54 = 115;
54 = 116;
54 = 117;
54 = 118;
54 = 119;
69 = 71;
69 = 72;
69 = 73;
69 = 74;
69 = 115;
69 = 116;
69 = 117;
69 = 118;
69 = 119;
10 = 11;
10 = 12;
10 = 13;
10 = 14;
10 = 120;
10 = 121;
10 = 122;
10 = 123;
10 = 124;
25 = 26;
25 = 27;
25 = 28;
25 = 29;
25 = 120;
25 = 121;
25 = 122;
25 = 123;
25 = 124;
40 = 41;
40 = 42;
40 = 43;
40 = 44;
40 = 120;
40 = 121;
40 = 122;
40 = 123;
40 = 124;
55 = 56;
55 = 57;
55 = 58;
55 = 59;
55 = 120;
55 = 121;
55 = 122;
55 = 123;
55 = 124;
70 = 71;
70 = 72;
70 = 73;
70 = 74;
70 = 120;
70 = 121;
70 = 122;
70 = 123;
70 = 124;
}
 
let trans edge x =
    match x with
    | None -> None
    | Some r -> Some {r with length = r.length + 1}
    

let merge u x y =
    match (x, y) with
    | (None, _) -> y
    | (_, None) -> x
    | (Some i, Some j) -> 
        if i.lp > j.lp then x
        else if j.lp > i.lp then y
        else if i.length < j.length then x else y
    

let init node =
    match node with
    | 75n -> Some { comm = 0; lp = 100; length = 0;}
    | _ -> None
    

let reachable (u: tnode) (x: attribute) =
    match u with
    | src -> match x with
            | None -> false
            | Some _ -> true
    | _ -> true

let sol = solution {init = init; trans = trans; merge = merge}

assert foldNodes (fun u v acc -> acc && reachable u v) sol true

